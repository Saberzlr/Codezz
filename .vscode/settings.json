/*{
    "python.pythonPath": "D:\\dev\\python\\python3.12.1\\python.exe",
    "cSpell.words": [
        "cstet",
        "ctest",
        "fout",
        "Kruskal",
        "marray",
        "msearch",
        "msort",
        "mysort",
        "piirad"
    ],
    "files.associations": {
        "deque": "cpp",
        "initializer_list": "cpp",
        "queue": "cpp",
        "type_traits": "cpp",
        "vector": "cpp",
        "xstring": "cpp",
        "xutility": "cpp",
        "iostream": "cpp",
        "ostream": "cpp",
        "utility": "cpp"
    },
    "python.testing.unittestArgs": [
        "-v",
        "-s",
        "./PyCode",
        "-p",
        "*test.py"
    ],
    "python.testing.pytestEnabled": false,
    "python.testing.unittestEnabled": true
}*/
{
    "files.associations": {
        "vector": "cpp",
        "iostream": "cpp",
        "cstdio": "cpp",
        "new": "cpp",
        "queue": "cpp",
        "array": "cpp",
        "*.tcc": "cpp",
        "deque": "cpp",
        "string": "cpp",
        "unordered_map": "cpp",
        "memory_resource": "cpp",
        "optional": "cpp",
        "string_view": "cpp",
        "algorithm": "cpp",
        "memory": "cpp",
        "initializer_list": "cpp",
        "type_traits": "cpp",
        "utility": "cpp",
        "ostream": "cpp",
        "atomic": "cpp",
        "cstdlib": "cpp",
        "istream": "cpp",
        "ndslib.h": "c",
        "inttypes.h": "c",
        "platform.h": "c",
        "ae350.h": "c",
        "atcsmu100.h": "c",
        "stdio.h": "c",
        "time.h": "c"
    },
    "C_Cpp.clang_format_sortIncludes": true, // 格式化时调整include的顺序（按字母排序）
    "clang.cflags": [ // 控制c语言静态检测的参数
        "--target=x86_64-w64-mingw32",
        "-I",
        "C_Cplus/.include/**",
        "-std=c11",
        "-Wall"
    ],
    "clang.cxxflags": [ // 控制c++静态检测时的参数
        "--target=x86_64-w64-mingw32", // clang另一个插件无法更改这个，所以头文件找不到报错
        "-I",
        "C_Cplus/.include/**",  // 自己写头文件的时候这里要改，包含进去，不然静态检测会检测不到头文件
        "-std=c++17",
        "-Wall"
    ],
    "clang.completion.enable": true,
    "openhab.useRestApi": false
    /// code-runner
    /// "code-runner.runInTerminal": true, // 设置成false会在“输出”中输出，无法输入
    /// "code-runner.executorMap": {
    ///     "c": "cd $dir && clang '$fileName' -o '$fileNameWithoutExt.exe' -I './include/' -Wall -g -O2 -static-libgcc --target=x86_64-w64-mingw -std=c11 && &'$dir$fileNameWithoutExt'",
    ///     "cpp": "cd $dir && clang++ '$fileName' -o '$fileNameWithoutExt.exe' -I './include/' -Wall -g -O2 -static-libgcc --target=x86_64-w64-mingw -std=c++17 && &'$dir$fileNameWithoutExt'"
    ///     // "c": "cd $dir && clang $fileName -o $fileNameWithoutExt.exe -Wall -g -O2 -static-libgcc --target=x86_64-w64-mingw -std=c11 && $dir$fileNameWithoutExt",
    ///     // "cpp": "cd $dir && clang++ $fileName -o $fileNameWithoutExt.exe -Wall -g -O2 -static-libgcc --target=x86_64-w64-mingw -std=c++17 && $dir$fileNameWithoutExt"
    /// }, // 控制Code Runner命令；未注释的仅适用于PowerShell（Win10默认），文件名中有空格也可以编译运行；注释掉的适用于cmd（win7默认），也适用于PS，文件名中有空格时无法运行
    /// "code-runner.saveFileBeforeRun": true, // run code前保存
    /// "code-runner.preserveFocus": true, // 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false
    /// "code-runner.clearPreviousOutput": false, // 每次run code前清空属于code runner的终端消息，默认false
    /// "code-runner.ignoreSelection": true // 默认为false，效果是鼠标选中一块代码后可以单独执行，但C是编译型语言，不适合这样用
}